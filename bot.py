import os
import json
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –•—Ä–∞–Ω–∏–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

### üèÜ –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ß–ï–†–ï–ó DEEPSEEK ###
def analyze_with_deepseek(text):
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "system", "content": "–¢—ã —Å—É–¥—å—è –≤ —Å–ø–æ—Ä–µ. –û—Ç–≤–µ—Ç—å, –∫—Ç–æ –ø—Ä–∞–≤."},
                     {"role": "user", "content": text}],
        "temperature": 0.7
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        data = response.json()
        return data["choices"][0]["message"]["content"]
    else:
        return "–û—à–∏–±–∫–∞ –≤ DeepSeek API"

### üëÄ –ö–û–ú–ê–ù–î–ê /who –î–õ–Ø –°–£–î–ê –í –ß–ê–¢–ï ###
@dp.message_handler(commands=['who'])
async def who_is_right(message: Message):
    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    chat_messages = await message.chat.get_messages(message.message_id - 10, message.message_id)

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    text = "\n".join([f"{msg.from_user.full_name}: {msg.text}" for msg in chat_messages if msg.text])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek API
    verdict = analyze_with_deepseek(text)

    # –ù–∞–π–¥—ë–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤
    winner = None
    for user in message.chat.get_administrators():
        if user.user.full_name in verdict:
            winner = user.user.full_name
            break

    if winner:
        user_scores[winner] = user_scores.get(winner, 0) + 1
        await message.reply(f"üèÜ {winner} –ü–†–ê–í! –û—á–∫–∏: {user_scores[winner]}")
    else:
        await message.reply("ü§∑‚Äç‚ôÇÔ∏è DeepSeek –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")

### üìä –ö–û–ú–ê–ù–î–ê /scores –î–õ–Ø –ü–û–ö–ê–ó–ê –û–ß–ö–û–í ###
@dp.message_handler(commands=['scores'])
async def show_scores(message: Message):
    if user_scores:
        scores_text = "\n".join([f"{user}: {score} –æ—á–∫–æ–≤" for user, score in user_scores.items()])
        await message.reply(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{scores_text}")
    else:
        await message.reply("üîπ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤.")

### üî• –ó–ê–ü–£–°–ö –ë–û–¢–ê ###
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
